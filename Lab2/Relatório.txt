João Gabriel Cunha 2211302

1)Soma de matrizes
Faça um programa para somar matrizes de acordo
com o seguinte algoritmo
l O primeiro processo irá criar duas matrizes
preenchidas e uma terceira vazia em 3 áreas de
memória compartilhada.
l Para cada linha da matriz solução, o seu
programa deverá gerar um processo para o seu
cálculo.

#include <stdio.h>
#include <stdlib.h>
#include <sys/shm.h>
#include<sys/ipc.h>
#include <unistd.h>
#include <sys/wait.h>

#define LINHAS 3
#define COLUNAS 3
#define TAMANHO (LINHAS *COLUNAS* sizeof(int))

void imprimir_matriz (int *mat)
{
    for(int i =0; i< LINHAS; i++)
    {   for(int j=0; j< COLUNAS; j++)
        {
            printf(" %d ", mat[i*COLUNAS +j]);
        }
            printf("\n");
    }
}

int main()
{
    int shmA = shmget(IPC_PRIVATE,TAMANHO, IPC_CREAT | 0600);
    int shmB = shmget(IPC_PRIVATE, TAMANHO, IPC_CREAT | 0600);
    int shmS = shmget(IPC_PRIVATE, TAMANHO, IPC_CREAT| 0600);

    int *matA = (int *)shmat(shmA, NULL,0);
    int *matB = (int *)shmat(shmB, NULL, 0);
    int *matS = (int *)shmat(shmS,NULL,0);

    //Preenchendo as matrizes 
    matA[0] = 5; matA[1] = 7; matA[2] = 9;
    matA[3] = 6; matA[4] = 3; matA[5] = 6;
    matA[6] = 3; matA[7] = 1; matA[8] = 2;

    
    matB[0] = 5; matB[1] = 3; matB[2] = 0;
    matB[3] = 6; matB[4] = 2; matB[5] = 6;
    matB[6] = 5; matB[7] = 7; matB[8] = 0;

    //
    for(int i =0; i< LINHAS; i++)
    {  pid_t pid = fork();
        if(pid==0){
          for(int j=0; j <COLUNAS; j++){
            int idx = i*COLUNAS +j;
            matS[idx] = matA[idx] + matB[idx];
          }
            exit(0);
        }

    }
    // Processo pai espera os filhos
    for(int i=0; i < LINHAS; i++)
    {
        wait(NULL);
    }

    //Imprimindo as matrizes 
    printf("Matriz A: \n");
    imprimir_matriz(matA);

    printf("\nMatriz B: \n");
    imprimir_matriz(matB);

    printf("\nMatriz Soma(S): \n");
    imprimir_matriz(matS);


    shmdt(matA);
    shmdt(matB);
    shmdt(matS);

    shmctl(shmA, IPC_RMID,NULL);
    shmctl(shmB, IPC_RMID,NULL);
    shmctl(shmS, IPC_RMID, NULL);
    return 0;
}

gcc -o ex1 ex1.c
./ex1

Matriz A: 
 5  7  9 
 6  3  6 
 3  1  2 

Matriz B: 
 5  3  0 
 6  2  6 
 5  7  0 

Matriz Soma(S): 
 10  10  9 
 12  5  12 
 8  8  2 

O processo pai cria as matrizes A,B e S, em memória compartilhada, e preenche as duas primeiras.
Em seguida cria um processo filho para cada linha da matriz, e cada filho realiza a soma dos elementos
da sua respectiva linha, armazenando o resultado em matS.

2)Mensagem do Dia
 Faça um programa que:
 Leia uma mensagem do dia do stdin (ou arquivo)
 Crie uma memória compartilhada com a chave
8752
 Salve a mensagem na memória
 Faça um outro programa “cliente” que utilize
a mesma chave (8752) e exiba a mensagem
do dia para o usuário

//servidor
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<sys/ipc.h>
#include<sys/shm.h>

#define CHAVE 8752
#define TAMANHO 1024

//Servidor
int main()
{
    int shmid = shmget(CHAVE, TAMANHO, IPC_CREAT | 0600);
    if (shmid == -1)
    {
        perror("Erro ao criar memória compartilhada");
        exit(1);
    }

    char *mensagem = (char *)shmat(shmid, NULL, 0);
        if (mensagem == (char *)-1){
            perror("Erro ao anexar memória compartilhada");
            exit(1);
            
        }

    printf("Digite a mensagem do dia: ");
    fgets(mensagem, TAMANHO, stdin);
    printf("Mensagem salva na memória compartilhada");

    return 0;
}

//Cliente

#include <stdio.h>
#include <stdlib.h>
#include <sys/ipc.h>
#include<sys/shm.h>

#define CHAVE 8752
#define TAMANHO 1024

int main()  
{
    int shmid = shmget(CHAVE,TAMANHO, 0600);
    if (shmid == -1)
    {
        perror("Erro ao acessar a memória");
        exit(1);
    }

    char *mensagem = (char *) shmat(shmid, NULL, 0);
    if (mensagem == (char *) -1)
    {
        perror("Erro ao anexar memória compartilhada");
        exit(1);
    }

    printf("Mensagem do dia: %s", mensagem);
    
    shmdt(mensagem);
    shmctl(shmid, IPC_RMID,NULL);





    return 0;
}

gcc -o ex2_servidor ex2_servidor.c
gcc -o ex2_cliente ex2_cliente.c

./ex2_servidor
./ex2_cliente

Digite a mensagem do dia: oi amigo!!!
Mensagem salva na memória compartilhada

Mensagem do dia: oi amigo!!!

Usei o programa cliente para escrever a mensagem "oi amigo!!" em uma área de memória compartilhada
e usei o programa para ler essa mensagem da memória compartilhada e imprimir na tela, funcionou...


3)Busca paralela em vetor
l Faça um programa paralelo (com pelo menos
4 processos) para localizar uma chave em
um vetor.
l Crie uma memória compartilhada com dados
numéricos inteiros e desordenados e a divida
pelo número de processos
l Cada processo deve procurar o dado na sua área
de memória e informar a posição onde o dado foi
localizado. 

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <sys/wait.h>

#define TAMANHO_VETOR 48
#define N_PROCESSOS 4
#define CHAVE_BUSCA 47

int main()
{
    int shm_id = shmget(IPC_PRIVATE, TAMANHO_VETOR*sizeof(int), IPC_CREAT | 0600);
    if (shm_id == -1)
    {
        perror("Erro ao alocar memória compartilhada  ");
        exit(1);
    }

    int *vetor = (int *)shmat(shm_id,NULL,0);
    if (vetor == (int *)-1) {
        perror("Erro ao anexar memória");
        exit(1);

    }

    srand(getpid());
    for(int i =0; i<TAMANHO_VETOR; i++)
    {
      vetor[i] = rand()%41;

      vetor[31] = CHAVE_BUSCA;

    }

    printf("Vetor:\n"); 
    for(int i =0; i<TAMANHO_VETOR; i++){
        printf(" %2d ", vetor[i]);
        if ((i+1)%12 == 0) printf("\n");
    }
    
    printf("\n");

    int intervalo = TAMANHO_VETOR/ N_PROCESSOS;

    for (int i = 0; i < N_PROCESSOS; i++) {
        pid_t pid = fork();
        if (pid == 0) {
            int inicio = i * intervalo;
            int fim = (i == N_PROCESSOS - 1) ? TAMANHO_VETOR : inicio + intervalo;

            for (int j = inicio; j < fim; j++) {
                if (vetor[j] == CHAVE_BUSCA) {
                    printf("Processo %d encontrou o valor %d na posição %d\n", getpid(), CHAVE_BUSCA, j);
                    exit(0);
                }
            }

            // Se não achou
            printf("Processo %d não encontrou o valor\n", getpid());
            exit(0);
        }
    }

    // Pai espera os filhos
    for (int i = 0; i < N_PROCESSOS; i++) {
        wait(NULL);
    }

    // Libera memória
    shmdt(vetor);
    shmctl(shm_id, IPC_RMID, NULL);

    return 0;
}

gcc -o ex3 ex3.c
./ex3

Vetor:
 24   1   3  25  24  14  34  34  13  31  29   5 
 40  19   4   6  26   1  30  22   7  33  35  38 
 10   9  37  39   4  40   3  47   2   6  16  29 
 23   9  22  36   0  13   2  40  34   8   7  20 

Processo 7059 não encontrou o valor
Processo 7060 não encontrou o valor
Processo 7061 encontrou o valor 47 na posição 31
Processo 7062 não encontrou o valor


Como proposto no enunciado, dividi o vetor em 4 partes diferentes na área de memória
compartilhada, e criei 4 processos, um para procurar o número 47 em cada quarto do vetor
O terceiro processo achou....


4) Multiplicação multi-processo
Faça um programa que:
lTenha um processo pai que abre dois blocos de memória
compartilhada, m1 e m2.
lcria dois processos filho (use exec), P1 e P2: estes
também fazem attach em m1 ou m2 respectivamente
lCada um dá um sleep() randômico e escreve um valor int
na área compartilhada dele, e avisa o processo pai que um
novo valor foi gerado, escrevendo tb um nr de sequencia
lO pai fica em loop verificando se houve um novo valor.
Apenas quando ambos P1 e P2 geraram um novo valor, o
pai imprime o produto dos valores gerados por P1 e P2

// ex4_pai.c
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <time.h>
#include <sys/wait.h>

struct Mem {
    int valor;
    int seq;
};

int main() {
    key_t key1 = 1234;
    key_t key2 = 5678;

    int shmid1 = shmget(key1, sizeof(struct Mem), IPC_CREAT | 0600);
    int shmid2 = shmget(key2, sizeof(struct Mem), IPC_CREAT | 0600);

    if (shmid1 < 0 || shmid2 < 0) {
        perror("Erro ao criar memórias compartilhadas");
        exit(1);
    }

    struct Mem *m1 = (struct Mem *)shmat(shmid1, NULL, 0);
    struct Mem *m2 = (struct Mem *)shmat(shmid2, NULL, 0);

    m1->seq = 0;
    m2->seq = 0;

    printf("Memórias criadas. Iniciando filhos...\n");

    if (fork() == 0) {
        if (execl("./ex4_filho1", "ex4_filho1", NULL) == -1) {
            perror("exec filho1");
            exit(1);
        }
    }

    if (fork() == 0) {
        if (execl("./ex4_filho2", "ex4_filho2", NULL) == -1) {
            perror("exec filho2");
            exit(1);
        }
    }

    int last_seq1 = 0, last_seq2 = 0;

    while (1) {
        if (m1->seq > last_seq1 && m2->seq > last_seq2) {
            printf("Novo valor de P1: %d (seq %d)\n", m1->valor, m1->seq);
            printf("Novo valor de P2: %d (seq %d)\n", m2->valor, m2->seq);
            printf("Produto: %d\n\n", m1->valor * m2->valor);
            last_seq1 = m1->seq;
            last_seq2 = m2->seq;
        } else {
            printf("Esperando atualizações... (seq1=%d, seq2=%d)\n", m1->seq, m2->seq);
        }
        sleep(1);
    }

    return 0;
}

// ex4_filho1.c
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <time.h>

struct Mem {
    int valor;
    int seq;
};

int main() {
    key_t key = 1234;
    int shmid = shmget(key, sizeof(struct Mem), 0600);
    if (shmid < 0) {
        perror("shmget filho1");
        exit(1);
    }

    struct Mem *mem = (struct Mem *)shmat(shmid, NULL, 0);

    srand(getpid());

    while (1) {
        sleep(rand() % 5 + 1);
        mem->valor = rand() % 100;
        mem->seq++;
        printf("[filho1] Novo valor: %d (seq: %d)\n", mem->valor, mem->seq);
    }

    return 0;
}

// ex4_filho2.c
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <time.h>

struct Mem {
    int valor;
    int seq;
};

int main() {
    key_t key = 5678;
    int shmid = shmget(key, sizeof(struct Mem), 0600);
    if (shmid < 0) {
        perror("shmget filho2");
        exit(1);
    }

    struct Mem *mem = (struct Mem *)shmat(shmid, NULL, 0);

    srand(getpid());

    while (1) {
        sleep(rand() % 5 + 1);
        mem->valor = rand() % 100;
        mem->seq++;
        printf("[filho2] Novo valor: %d (seq: %d)\n", mem->valor, mem->seq);
    }

    return 0;
}



 gcc -o ex4_pai ex4_pai.c
 gcc -o ex4_filho1 ex4_filho1.c
 gcc -o ex4_filho2 ex4_filho2.c
./ex4_pai


Memórias criadas. Iniciando filhos...
Esperando atualizações... (seq1=0, seq2=0)
Esperando atualizações... (seq1=0, seq2=0)
Esperando atualizações... (seq1=0, seq2=0)
Esperando atualizações... (seq1=0, seq2=0)
[filho2] Novo valor: 79 (seq: 1)
Esperando atualizações... (seq1=0, seq2=1)
Esperando atualizações... (seq1=0, seq2=1)
[filho1] Novo valor: 29 (seq: 1)
Novo valor de P1: 29 (seq 1)
Novo valor de P2: 79 (seq 1)
Produto: 2291

Esperando atualizações... (seq1=1, seq2=1)
Esperando atualizações... (seq1=1, seq2=1)
[filho2] Novo valor: 69 (seq: 2)
Esperando atualizações... (seq1=1, seq2=2)
[filho1] Novo valor: 2 (seq: 2)
[filho2] Novo valor: 12 (seq: 3)
Novo valor de P1: 2 (seq 2)
Novo valor de P2: 12 (seq 3)
Produto: 24

Esperando atualizações... (seq1=2, seq2=3)
[filho2] Novo valor: 10 (seq: 4)
Esperando atualizações... (seq1=2, seq2=4)
[filho1] Novo valor: 71 (seq: 3)
Novo valor de P1: 71 (seq 3)
Novo valor de P2: 10 (seq 4)
Produto: 710

[filho2] Novo valor: 82 (seq: 5)
Esperando atualizações... (seq1=3, seq2=5)
Esperando atualizações... (seq1=3, seq2=5)
Esperando atualizações... (seq1=3, seq2=5)
[filho1] Novo valor: 91 (seq: 4)
Novo valor de P1: 91 (seq 4)
Novo valor de P2: 82 (seq 5)
Produto: 7462

Esperando atualizações... (seq1=4, seq2=5)
[filho2] Novo valor: 79 (seq: 6)
Esperando atualizações... (seq1=4, seq2=6


O programa usa memória compartilhada para comunicação entre um processo pai e dois filhos. 
O pai cria dois blocos de memória (m1 e m2) contendo um valor e um número de sequência.
 Cada filho atualiza sua respectiva memória com um valor aleatório e incrementa o contador.
O pai verifica constantemente se ambos os filhos atualizaram seus dados e, quando isso acontece, 
imprime o produto dos valores. A sincronização é feita comparando os números de sequência.



